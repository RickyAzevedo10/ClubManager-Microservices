// <auto-generated />
using System;
using Infrastructures.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructures.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241115154250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructures.Domain.Entities.Facility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCategoryId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.FacilityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9626),
                            Description = "Outdoor or indoor areas designed for sports activities, such as soccer fields, tennis courts, etc.",
                            Name = "Sports Field"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9679),
                            Description = "Fitness centers equipped with exercise machines, weights, and other fitness equipment.",
                            Name = "Gym"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9680),
                            Description = "Rooms designated for meetings, conferences, and other business-related gatherings.",
                            Name = "Meeting Room"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9682),
                            Description = "Facilities providing restroom and changing areas, including showers and lockers.",
                            Name = "Restroom"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9683),
                            Description = "Workspaces for administrative tasks, including private offices and open office areas.",
                            Name = "Office"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 11, 15, 15, 42, 50, 307, DateTimeKind.Local).AddTicks(9684),
                            Description = "Large rooms or halls designed for lectures, presentations, and performances.",
                            Name = "Auditorium"
                        });
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.FacilityReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ReservedUserId");

                    b.ToTable("FacilityReservations");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.MaintenanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestUserId");

                    b.ToTable("MaintenanceHistories");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.MaintenanceRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestedUserId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExternalUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.Facility", b =>
                {
                    b.HasOne("Infrastructures.Domain.Entities.FacilityCategory", "FacilityCategory")
                        .WithMany("Facility")
                        .HasForeignKey("FacilityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityCategory");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.FacilityReservation", b =>
                {
                    b.HasOne("Infrastructures.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructures.Domain.Entities.User", "ReservedUser")
                        .WithMany()
                        .HasForeignKey("ReservedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("ReservedUser");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.MaintenanceHistory", b =>
                {
                    b.HasOne("Infrastructures.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructures.Domain.Entities.User", "RequestUser")
                        .WithMany()
                        .HasForeignKey("RequestUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestUser");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.MaintenanceRequest", b =>
                {
                    b.HasOne("Infrastructures.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructures.Domain.Entities.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("Infrastructures.Domain.Entities.FacilityCategory", b =>
                {
                    b.Navigation("Facility");
                });
#pragma warning restore 612, 618
        }
    }
}
